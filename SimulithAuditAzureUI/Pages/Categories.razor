@page "/Categories"
@using SimulithAuditAzureUI.Components
@using SimulithAuditAzureUI.Components.Dialogs
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject IStringLocalizer<App> Localizer
@inject ICategoryData categoryData
@inject NavigationManager navManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (CategoriesList != null)
{
@*<MudTextField @bind-Value="TextValue" Label="Standard" Variant="Variant.Text"></MudTextField>
<MudTextField @bind-Value="DescriptionText" T="string" Label="Outlined" Variant="Variant.Outlined" Placeholder="Description" Lines="3" />

    <MudButton OnClick="CreateCategory" Variant="Variant.Filled">Create category</MudButton>
    
    
    <MudButton OnClick="DeleteCategory" Color="Color.Error" Variant="Variant.Filled">Delete category</MudButton>
    <MudDataGrid Items="@_categories" MultiSelection="true" >
    <Columns>
        <SelectColumn T="CategoryModel" />
        <Column T="CategoryModel" Field="CategoryName" />
        <Column T="CategoryModel" Field="CategoryDescription" />
    </Columns>
</MudDataGrid>*@



<MudContainer Class="d-flex justify-center mb-2">
    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Large" IconSize="Size.Large" Label="Add A New
    Cake" Class="ma-2" @onclick="(e => CreateCategory())"/>
</MudContainer>
<MudGrid Justify="Justify.Center" class="pr-4 pl-4">
    @foreach (var category in CategoriesList)
    {
        <MudItem xs="3">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">@category.CategoryName</MudText>
                        <MudText Typo="Typo.h6">@category.Id $</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardMedia Image="https://www.logodesign.net/images/nature-logo.png" Height="250" />
                <MudCardContent>
                    <MudText Typo="Typo.body2">@category.CategoryDescription</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Filled.Edit" Color="Color.Primary" OnClick="UpdateCategory"/>
                    <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" @onclick="(e => DeleteCategory(category.CategoryName))" />
                </MudCardActions>
            </MudCard>

        </MudItem>
    }

</MudGrid>
  
}


@code {




    public string TextValue { get; set; }

    public string SomeValue { get; set; }


    public string DescriptionText { get; set; }

    public List<CategoryModel> CategoriesList { get; set; } = new List<CategoryModel>();

    protected override async Task OnInitializedAsync()
    {
        CategoriesList = await categoryData.GetAllCategories();
    }


    private async Task CreateCategory(){
        // var loggedUser = authProvider.GetUserFromAuth(userData);

        DialogOptions closeOnEscapeKey = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = DialogService.Show<AddNewCategory>("Simple Dialog", closeOnEscapeKey);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            // Category model casting from dialog return after accept  
            var temp = (CategoryModel)(result.Data ?? false);

            CategoryModel category = new()
                {
                    CategoryName = temp.CategoryName,
                    CategoryDescription = temp.CategoryDescription

                };
            await categoryData.CreateCategory(category);

            ShowSnackbar();
            CategoriesList = await categoryData.GetAllCategories();
        }
    }

    async Task UpdateCategory()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = DialogService.Show<AddNewCategory>("Edit Dialog", closeOnEscapeKey);

        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var temp = (CategoryModel)(result.Data ?? false);
            await categoryData.UpdateCategory(temp);
            CategoriesList = await categoryData.GetAllCategories();
        }
    }

        void ShowSnackbar()
    {
        Snackbar.Add("Random message");
    }


    private async Task DeleteCategory(string id)
    {

        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DialogTemplateExample_Dialog>("Delete", parameters, options);
        
        var result = await dialog.Result;
        if(!result.Cancelled)
        {
            await categoryData.DeleteCategory(id);
            CategoriesList = await categoryData.GetAllCategories();
        }
    }
   
}




@* public string Id { get; set; }
    public string CategoryName { get; set; }
    public string CategoryDescription { get; set; }
  }*@