@page "/SampleData"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
<h3>SampleData</h3>


<button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>

<button class="btn btn-primary" @onclick="CreateUser">Create User</button>

<p>
    <label>
        Normal Blazor binding: 
        <input @bind="InputValue" />
    </label>
</p>

<p>
    <label>
        Demonstration of equivalent HTML binding: 
        <input value="@InputValue"
            @onchange="@((ChangeEventArgs __e) => InputValue = __e?.Value?.ToString())" />
    </label>
</p>

<p>
    <code>InputValue</code>: @InputValue
</p>

@if(cats != null){


      @foreach(var category in cats)
       {
                <p>@category.CategoryName</p>
                <p>@category.CategoryDescription</p>
              
       }
}


@code {



    private string? InputValue { get; set; }

    private async Task CreateUser()
    {
        var loggedUser = authProvider.GetUserFromAuth(userData);

        UserModel user = new()
            {
                FirstName = "Marius",
                LastName = "mariukanas",
                EmailAddress = "m.gzegozevskis@gmail.com",
                ObjectIdentifier = "awewae"
            };
        await userData.CreateUser(user);

    }

    List<CategoryModel> cats;

    protected async override Task OnInitializedAsync()
    {

        var categories = await categoryData.GetAllCategories();
        cats = categories;
    }



    private async Task CreateCat(string a, string b)
    {
         CategoryModel cat = new()
            {
                CategoryName = a,
                CategoryDescription =b
            };
            await categoryData.CreateCategory(cat);
    }



    private async Task CreateCategories(){
        var categories = await categoryData.GetAllCategories();
        if(categories?.Count > 0)
        {

            return;
        }

        CategoryModel cat = new()
            {
                CategoryName = "Courses",
                CategoryDescription ="Full paid courses"
            };
            await categoryData.CreateCategory(cat);

             CategoryModel cat2 = new()
            {
                CategoryName = "Dev Questions",
                CategoryDescription ="Full paid courses"
            };
            await categoryData.CreateCategory(cat2);
             CategoryModel cat3 = new()
            {
                CategoryName = "10 min train",
                CategoryDescription ="Quick video tutorial"
            };
            await categoryData.CreateCategory(cat3);

    }
}
